{"version":3,"sources":["components/Header.js","components/Search.js","components/Restaurant.js","components/Main.js","components/Detail.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Search","props","state","value","handleClick","bind","handleChange","event","this","setState","target","preventDefault","type","placeholder","onChange","onClick","React","Component","Restaurant","restaurant","map","val","to","_id","key","name","address","opening_time","Main","getSearch","searchTerm","url","fetch","then","response","json","data","catch","err","console","log","Detail","id","match","params","infoUrl","history","goBack","types","email","phone","menu","review","star","withRouter","Footer","App","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0e714916.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(){\r\n    return(\r\n    <header>\r\n        <h3>This is a header</h3>\r\n    </header>\r\n    );\r\n}\r\nexport default Header;","import React from 'react';\r\n\r\nclass Search extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {value:''}\r\n        this.handleClick  = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleClick(event){\r\n        event.preventDefault();\r\n        this.props.handleClick(this.state.value);\r\n    }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form>\r\n                    <input type='text' placeholder='Enter Your Restaurant' value={this.state.value} onChange={this.handleChange}></input>\r\n                    <button onClick={this.handleClick}>Search</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Search;","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Restaurant(props){\r\n    return(\r\n        <div>\r\n            <ul>\r\n                {\r\n                    props.restaurant.map(val => {\r\n                        return <Link to={`/detail/${val._id}`} key={val._id}>\r\n                                <div>\r\n                                    <h3>{val.name}</h3>\r\n                                    <p>{val.address}</p>\r\n                                    <p>{val.opening_time}</p>\r\n                                </div>\r\n                            </Link>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\nexport default Restaurant;","import React from 'react';\r\nimport Search from './Search';\r\nimport Restaurant from './Restaurant';\r\n\r\nclass Main extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {restaurant: []}\r\n        this.getSearch = this.getSearch.bind(this);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <main>\r\n            <h2>This is main part</h2>\r\n            <Search handleClick={this.getSearch}/>\r\n            <Restaurant restaurant = {this.state.restaurant}/>\r\n        </main>\r\n        );\r\n    }\r\n\r\n    getSearch(searchTerm){\r\n        const url = 'http://restaurant-api-module-2.herokuapp.com/api/restaurants'\r\n        const proxyUrl = 'https://cors-anywhere.herokuapp.com/'\r\n        fetch(proxyUrl + url).then(response => response.json()).then(data => {\r\n            this.setState({\r\n                restaurant: data['data']['name']\r\n            });\r\n        }).catch(err => {\r\n            console.log(\"Can't access\" + url);\r\n        });\r\n        console.log(this.state.restaurant);\r\n    }\r\n}\r\nexport default Main;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass Detail extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {restaurant: null}\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        let id = this.props.match.params._id;\r\n        let infoUrl = `http://restaurant-api-module-2.herokuapp.com/api/restaurants/${id}`\r\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n        fetch(proxyurl + infoUrl).then(response => response.json()).then(data => {\r\n            this.setState({\r\n                restaurant: data['data']\r\n            });\r\n        });\r\n    }\r\n\r\n    handleClick(){\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <main>\r\n\r\n                <button onClick={this.handleClick}>Go Back</button>\r\n\r\n                <div>\r\n\r\n                    {\r\n                        this.state.restaurant ?\r\n                        <div>\r\n                            <h3>{this.state.restaurant.name}</h3>\r\n                            <p>{this.state.restaurant.address}</p>\r\n                            <p>{this.state.restaurant.opening_time}</p>\r\n\r\n                            <ul>\r\n                                <li>{this.state.restaurant.types[0]}</li>\r\n                                <li>{this.state.restaurant.types[1]}</li>\r\n                                <li>{this.state.restaurant.types[2]}</li>\r\n                                <li>{this.state.restaurant.types[3]}</li>\r\n                            </ul>\r\n\r\n                            <p>{this.state.restaurant.email}</p>\r\n                            <p>{this.state.restaurant.phone}</p>\r\n\r\n                            <div>\r\n                                <p>{this.restaurant.menu[1]}</p>\r\n                                <p>{this.restaurant.menu[2]}</p>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <h5>{this.state.restaurant.review.star}</h5>\r\n                                <p>{this.state.restaurant.review.name}</p>\r\n                                <p>{this.state.restaurant.review.review}</p>\r\n                            </div> \r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <p>Loading.....</p>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Detail);","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return(\r\n    <footer>\r\n        <p>This is a footer</p>\r\n    </footer>\r\n    );\r\n}\r\nexport default Footer;","import React from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Detail from './components/Detail';\nimport Footer from './components/Footer';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header/>\n\n        <Switch>\n          <Route path='/detail/:_id'>\n            <Detail/>\n          </Route>\n\n          <Route path='/'>\n            <Main/>\n          </Route>\n        </Switch>\n\n        <Footer/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}